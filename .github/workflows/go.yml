name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Требуется для публикации релизов
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build
      id: build
      run: |
        # Извлекаем имя репозитория (часть после слеша)
        EXE_NAME="${GITHUB_REPOSITORY##*/}"
        echo "Building executable: $EXE_NAME"
        go build -v -o "$EXE_NAME" ./...
        echo "exe_name=$EXE_NAME" >> $GITHUB_OUTPUT

    - name: Test
      run: go test -v ./...

    - name: Get latest release
      id: get_release
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          let release;
          try {
            release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: 'latest'
            });
          } catch (error) {
            core.info("Release with tag 'latest' not found.");
          }
          return release ? { id: release.data.id, upload_url: release.data.upload_url } : {};
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete existing release asset if exists
      if: steps.get_release.outputs.id != ''
      id: delete_asset
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const releaseId = parseInt('${{ steps.get_release.outputs.id }}');
          const assetName = '${{ steps.build.outputs.exe_name }}';
          const assets = await github.rest.repos.listReleaseAssets({
            owner,
            repo,
            release_id: releaseId
          });
          for (const asset of assets.data) {
            if (asset.name === assetName) {
              await github.rest.repos.deleteReleaseAsset({
                owner,
                repo,
                asset_id: asset.id
              });
              core.info(`Deleted asset ${assetName}`);
            }
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release if not exists
      id: create_release
      if: steps.get_release.outputs.id == ''
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: 'latest',
            name: 'Latest Release',
            body: 'Автоматически созданный релиз с последними изменениями.',
            draft: false,
            prerelease: false,
          });
          return { id: release.data.id, upload_url: release.data.upload_url };
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set release output
      id: set_release
      run: |
        if [ -n "${{ steps.get_release.outputs.id }}" ]; then
          echo "release_id=${{ steps.get_release.outputs.id }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ steps.get_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        else
          echo "release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
        fi

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.set_release.outputs.upload_url }}
        asset_path: ./${{ steps.build.outputs.exe_name }}
        asset_name: ${{ steps.build.outputs.exe_name }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
